<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net20;net30;net35;net40;net45;netstandard1.0;netstandard2.0</TargetFrameworks>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

    <Title>Here</Title>
    <RootNamespace>Here</RootNamespace>
    <AssemblyName>Here</AssemblyName>

    <!-- Overridden by CI -->
    <Version>1.0.0</Version>
    <AssemblyVersion>1.0.0</AssemblyVersion>
    <FileVersion>1.0.0</FileVersion>

    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!-- Include PDB files in NuGet for Source Link because symbolsource.org does not support portable PDBs -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>

    <Copyright>Copyright © 2018</Copyright>
    <Description>.NET library that provide mainly functional features for C#.

This means concept of Option, Result, Either and ValueObject.

Supported platforms:
- .NET Standard 1.0+
- .NET Core 1.0+
- .NET Framework 2.0+

Supports Source Link</Description>
    <Owners>Alexandre Rabérin</Owners>
    <Authors>Alexandre Rabérin</Authors>
    <Company>Alexandre Rabérin</Company>

    <IsPackable>true</IsPackable>
    <PackageId>Here</PackageId>
    <PackageReleaseNotes>➟ Release 0.8.1
- General:
    - Library use C# 7.2 features.
    - Change target NetStandard 1.1 to NetStandard 1.0.
    - Adjust some annotations of library methods.
    - Add early throw for parameters that should not be null.
    - Add exception documentation on library functions.

- Option:
    - Add extensions to Enum, DateTime, DateTimeOffset and Guid.
    - Replace methods returning void by Unit.
    - Transform conversions from Option to other library types to extensions.
    - Transform operations available for Option as extensions into instance methods.

- Results:
    - Add extensions OnSuccessOrFailure.
    - Update some OnSuccess/OnFailure extensions to return the input result to make possible to chain them.
    - Add inputs parameters to lambda of some OnSuccess extensions.
    - Transform conversions from Results to other library types to extensions.

- Unit:
    - Add an implementation of Unit type.

- Either:
    - Add a first implementation Either monad (readonly structure).
        - Operations methods (IfLeft/IfRight/Match/Map, etc.).
        - Linq extensions.
        - Comparison helpers.
        - Conversions to other library types.</PackageReleaseNotes>
    <PackageTags>Here Functional C# Option Maybe Result Either ValueObject Monad</PackageTags>

    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/KeRNeLith/Here</PackageProjectUrl>
    <PackageIconUrl>https://raw.githubusercontent.com/KeRNeLith/Here/master/here_logo.png</PackageIconUrl>
    <RepositoryType>GitHub</RepositoryType>
    <RepositoryUrl>https://github.com/KeRNeLith/Here</RepositoryUrl>
  </PropertyGroup>

  <!-- C# configuration -->
  <PropertyGroup>
    <LangVersion>7.2</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE" Pack="true" PackagePath="" />
  </ItemGroup>

  <!-- Optimization configurations -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>JETBRAINS_ANNOTATIONS</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <!-- Targets defines -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net20'">
    <AssemblyTitle>Here .NET 2.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET20;SUPPORTS_BINARY_EXCEPTION_SERIALIZATION;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net30'">
    <AssemblyTitle>Here .NET 3.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET30;SUPPORTS_BINARY_EXCEPTION_SERIALIZATION;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net35'">
    <AssemblyTitle>Here .NET 3.5</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET35;SUPPORTS_BINARY_EXCEPTION_SERIALIZATION;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net40'">
    <AssemblyTitle>Here .NET 4.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET40;SUPPORTS_BINARY_EXCEPTION_SERIALIZATION;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net45'">
    <AssemblyTitle>Here .NET 4.5</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET45;SUPPORTS_BINARY_EXCEPTION_SERIALIZATION;SUPPORTS_AGGRESSIVE_INLINING;SUPPORTS_READONLY_DICTIONARY;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='netstandard1.0'">
    <AssemblyTitle>Here .NET Standard 1.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NETSTANDARD1_0;SUPPORTS_AGGRESSIVE_INLINING;SUPPORTS_READONLY_DICTIONARY;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='netstandard2.0'">
    <AssemblyTitle>Here .NET Standard 2.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NETSTANDARD2_0;SUPPORTS_BINARY_EXCEPTION_SERIALIZATION;SUPPORTS_AGGRESSIVE_INLINING;SUPPORTS_READONLY_DICTIONARY;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>

  <!-- Dependencies -->
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0-beta-63127-02" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'net20' OR '$(TargetFramework)' == 'net30'">
    <PackageReference Include="System.Core" Version="3.5.21022.801" />
  </ItemGroup>
</Project>