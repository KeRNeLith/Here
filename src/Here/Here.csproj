<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>net20;net35;net40;net45;netstandard1.0;netstandard2.0</TargetFrameworks>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

    <Title>Here</Title>
    <RootNamespace>Here</RootNamespace>
    <AssemblyName>Here</AssemblyName>

    <!-- Overridden by CI -->
    <Version>1.0.0</Version>
    <AssemblyVersion>1.0.0</AssemblyVersion>
    <FileVersion>1.0.0</FileVersion>

    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!-- Include PDB files in NuGet for Source Link because symbolsource.org does not support portable PDBs -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>

    <Copyright>Copyright © 2018</Copyright>
    <Description>.NET library that provide mainly functional features for C#.

This means concept of Option, Result, Either and ValueObject.

Supported platforms:
- .NET Standard 1.0+
- .NET Core 1.0+
- .NET Framework 2.0+

Supports Source Link</Description>
    <Owners>Alexandre Rabérin</Owners>
    <Authors>Alexandre Rabérin</Authors>
    <Company>Alexandre Rabérin</Company>

    <IsPackable>true</IsPackable>
    <PackageId>Here</PackageId>
    <PackageReleaseNotes>➟ Release 0.9.0
- Option:
    - Extend support of TryParseEnum to every targets.
    - Extend support of NoneIfNullOrSpaces to every targets.
    - Add an If treatment with templated result.
    - Add NoneIf treatments.
    - WARNING: Rename NoneClass to NoneOption.
    - Add IfOfDefault and ElseOrDefault extensions.

- Results:
    - Add an extension to throw the wrapped exception of a Result if there is one.
    - Results structure no longer throw NullPointerException when initialized by default rather than with factory methods.
    - Change some OnSuccess parameter to the wrapped value rather than result itself (for consistency).
    - Add an OnFailure extensions for results.
    - Add factory methods to create results from other failed results.

- Either:
    - Fix a crash in the Equals for Either with direct comparison of a left or right value when null.

- Misc:
    - Generate a documentation for the library via DocFX.
    - Make Option, results, eithers and Unit serializable types.</PackageReleaseNotes>
    <PackageTags>Here Functional C# Option Maybe Result Either ValueObject Monad</PackageTags>

    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/KeRNeLith/Here</PackageProjectUrl>
    <PackageIconUrl>https://raw.githubusercontent.com/KeRNeLith/Here/master/docs/images/here_logo.png</PackageIconUrl>
    <RepositoryType>GitHub</RepositoryType>
    <RepositoryUrl>https://github.com/KeRNeLith/Here</RepositoryUrl>
  </PropertyGroup>

  <!-- C# configuration -->
  <PropertyGroup>
    <LangVersion>7.2</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE" Pack="true" PackagePath="" />
  </ItemGroup>

  <!-- Optimization configurations -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>JETBRAINS_ANNOTATIONS</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>

  <!-- Targets defines -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net20'">
    <AssemblyTitle>Here .NET 2.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET20;SUPPORTS_SERIALIZATION;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net35'">
    <AssemblyTitle>Here .NET 3.5</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET35;SUPPORTS_SERIALIZATION;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net40'">
    <AssemblyTitle>Here .NET 4.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET40;SUPPORTS_SERIALIZATION;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;SUPPORTS_SYSTEM_TYPE_IS_ENUM;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <!-- NET20, NET30 and NET35 do not provide Task, NET40 provides Task but no ConfigureAwait / Task.FromResult, etc. -->
  <PropertyGroup Condition="'$(TargetFramework)'=='net45'">
    <AssemblyTitle>Here .NET 4.5</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NET45;SUPPORTS_SERIALIZATION;SUPPORTS_AGGRESSIVE_INLINING;SUPPORTS_READONLY_DICTIONARY;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;SUPPORTS_SYSTEM_TYPE_IS_ENUM;SUPPORTS_ASYNC;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='netstandard1.0'">
    <AssemblyTitle>Here .NET Standard 1.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NETSTANDARD1_0;SUPPORTS_AGGRESSIVE_INLINING;SUPPORTS_READONLY_DICTIONARY;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;SUPPORTS_ASYNC;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='netstandard2.0'">
    <AssemblyTitle>Here .NET Standard 2.0</AssemblyTitle>
    <DefineConstants>$(DefineConstants);NETSTANDARD2_0;SUPPORTS_SERIALIZATION;SUPPORTS_AGGRESSIVE_INLINING;SUPPORTS_READONLY_DICTIONARY;SUPPORTS_NULL_EMPTY_OR_WHITE_SPACE;SUPPORTS_PARSE_GUID;SUPPORTS_TRY_PARSE_ENUM;SUPPORTS_SYSTEM_TYPE_IS_ENUM;SUPPORTS_ASYNC;$(AdditionalConstants)</DefineConstants>
  </PropertyGroup>

  <!-- Dependencies -->
  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0-beta2-19367-01" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'net20'">
    <PackageReference Include="System.Core" Version="3.5.21022.801" />
  </ItemGroup>
</Project>